Pengenalan Laravel
Laravel adalah framework di PHP untuk membuat Web atau API
Laravel pertama kali dibuat oleh Taylor Otwell tahun 2011
Laravel adalah framework yang open source dan gratis, sehingga kita bisa menggunakannya tanpa biaya dan juga bisa berkontribusi ke projectnya
https://laravel.com/
https://github.com/laravel/laravel

Kenapa Laravel?
Saat ini Laravel adalah framework paling populer di PHP
Banyak perusahaan yang sudah menggunakan Laravel sebagai framework pilihan ketika menggunakan PHP
Laravel juga memiliki ekosistem yang sangat besar, terutama dari ekosistem teknologi pendukung, sehingga ketika menggunakan Laravel, kita bisa mengintegrasikan dengan teknologi pendukung nya dengan lebih mudah

Model View Controller
Laravel sendiri membawa konsep MVC (Model View Controller)
Sehingga jika kita sudah terbiasa dengan konsep tersebut, kita akan dengan mudah menggunakan Laravel
Detail dari konsep MVC itu sendiri sudah dibahas di kelas PHP MVC

Versi Laravel
https://laravel.com/docs/master/releases

Library
Laravel sendiri sebenarnya tidak membuat semua bagian pada framework nya sendiri
Beberapa bagian menggunakan library yang sudah populer di PHP, dan sudah kita bahas di roadmap kelas PHP
Contohnya untuk project management, Laravel menggunakan Composer
Untuk Logging, Laravel menggunakan Monolog
Untuk Unit Test, Laravel menggunakan PHPUnit
Dan lain-lain

Server Requirements
PHP >= 8.0
BCMath PHP Extension
Ctype PHP Extension
cURL PHP Extension
DOM PHP Extension
Fileinfo PHP Extension
JSON PHP Extension
Mbstring PHP Extension
OpenSSL PHP Extension
PCRE PHP Extension
PDO PHP Extension
Tokenizer PHP Extension
XML PHP Extension

Membuat Project
Laravel menggunakan Composer untuk project management nya
Dan untuk membuat projectnya pun kita bisa menggunakan Composer dengan perintah :
composer create-project laravel/laravel=version nama-folder
https://packagist.org/packages/laravel/laravel

Struktur Project

Menjalankan Laravel

Artisan
Saat kita membuat project Laravel, laravel sendiri sudah menyediakan secara otomatis sebuah file bernama artisan
File artisan ini sendiri sebenarnya adalah file yang berisi kode php
Kita bisa menggunakan perintah “php artisan” untuk melihat semua feature yang bisa dilakukan oleh file artisan

Menjalankan Laravel
File artisan bisa digunakan untuk melakukan banyak hal, salah satunya menjalankan aplikasi laravel ketika proses development
Untuk menjalankan aplikasi laravel dalam mode development, kita bisa gunakan perintah :
php artisan serve

Git
Saat kita membuat project Laravel, kita direkomendasikan untuk menggunakan Git sebagai source code management nya
Kita juga bisa melihat ada file seperti .gitignore yang otomatis dibuat di project Laravel, untuk memberi tahu, bagian mana yang tidak perlu di commit ke dalam Git repository
Jika teman-teman belum terbiasa dengan Git, saya sarankan mengikuti kelas Git saya sudah saya buat
https://kelas.programmerzamannow.com/p/git-untuk-pemula-sampai-mahir

Artisan
Saat membuat project Laravel, Laravel menyediakan sebuah file bernama artisan
File artisan ini adalah kode PHP yang bisa digunakan untuk banyak hal, kita akan bahas fitur-fitur file artisan ini secara bertahap di materi-materi selanjutnya

Melihat Semua Fitur File Artisan
Untuk melihat semua fitur file artisan, kita bisa gunakan perintah :
php artisan
Secara otomatis kita bisa lihat semua fitur yang terdapat di file artisan

Melihat Detail Informasi
Untuk melihat detail informasi perintah yang terdapat di file artisan, kita bisa gunakan perintah :
php artisan perintah --help
Contoh :
php artisan serve --help

Request Lifecycle
Sebelum kita membuat kode program menggunakan Laravel, ada baiknya kita perlu tahu cara kerja Laravel itu sendiri
Terutama bagaimana alur hidup dari request yang kita lakukan ke aplikasi Laravel
Jika teman-teman sudah mengikuti kelas PHP MVC yang saya buat, harusnya tidak akan terlalu bingung, karena hampir sama cara kerja nya

public/index.php
Entry point pertama dari aplikasi Laravel adalah sebuah file index.php yang terdapat di folder public
Semua request yang masuk ke aplikasi Laravel, maka akan masuk melalui file ini
File ini sengaja disimpan di dalam folder public tersendiri, agar file-file kode program lainnya tidak bisa diakses via URL
Ini file index.php sebenarnya tidak ada yang kompleks, hanya me-load framework Laravel, dan menjalankan kode program yang kita buat

Kernel
Dari index.php, request akan dilanjutkan ke class Kernel
Di Laravel, terdapat dua jenis Kernel, HTTP Kernel, dan Console Kernel. HTTP Kernel digunakan untuk menangani request berupa HTTP, sedangkan Console Kernel digunakan untuk menangani request berupa perintah console
Pada kelas ini kita bahas tentang HTTP Kernel, jadi ketika request web masuk ke index.php, maka request akan dilanjutkan ke HTTP Kernel

Service Provider
Kernel sendiri sebenarnya adalah core dari logic aplikasi, dimana di dalam Kernel, request yang masuk di tangani sampai mendapatkan response
Kernel melakukan beberapa hal, pertama Kernel melakukan proses bootstraping, yaitu me-load yang namanya Service Provider, yang akan kita bahas di materi terpisah
Laravel akan melakukan iterasi semua Service Provider dan melakukan proses registrasi dan juga bootstraping untuk semua Service Provider
Service Provider ini lah yang bertanggung jawab melakukan bootstraping semua komponen di Laravel, seperti database, queue, validation, routing dan lain-lain

Testing
Laravel menggunakan PHPUnit untuk implementasi unit test nya
Secara garis besar, di Laravel terdapat dua jenis test, unit test dan feature test / integration test

Unit Test
Untuk unit test, kita bisa membuat class unit test seperti menggunakan PHP Unit biasanya
Yaitu dengan membuat class turunan dari PHPUnit\Framework\TestCase
Jika kita perlu membuat test tanpa harus menggunakan fitur Laravel, maka kita cukup buat Unit Test saja

Integration Test
Laravel memiliki fitur yang mempermudah kita ketika membuat integration test
Bedanya dari unit test, di integration test, aplikasi laravel bisa diakses dengan mudah, misal kita nanti mau memanggil Database, Controller, dan lain-lain
Untuk membuat Integration Test, kita cukup membuat class turunan dari Illuminate\Foundation\Testing\TestCase
Integration Test akan lebih lambat dibandingkan Unit Test, karena kita butuh me-load framework Laravel terlebih dahulu
Dan jika kita membutuhkan fitur Laravel, maka kita wajib menggunakan Integration Test

Membuat Test
Untuk membuat Integration Test, kita bisa lakukan manual, atau kita bisa gunakan file artisan menggunakan perintah :
php artisan make:test NamaTest
Secara otomatis akan masuk ke folder tests/Feature
Jika kita ingin membuat Unit Test, kita bisa gunakan perintah :
php artisan make:test NamaTest --unit
Secara otomatis akan masuk ke folder tests/Unit

Menjalankan Test
Untuk menjalankan test, kita bisa gunakan PHPUnit seperti biasanya
Atau jika ingin menjalankan semua test, bisa menggunakan file artisan dengan perintah :
php artisan test

Environment
Saat kita membuat aplikasi, kadang kita perlu menyimpan nilai konfigurasi di environment variable
Laravel memiliki fitur untuk memudahkan kita mengambil data dari environment variable
Kita bisa menggunakan function env(key) atau Env::get(key) untuk mendapatkan nilai dari environment variable
Internal implementasi dari Environment variable di Laravel menggunakan library https://github.com/vlucas/phpdotenv

Kode : Environment Variable
<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Env;
use Tests\TestCase;

class EnvironmentTest extends TestCase
{
    public function testGetEnv()
    {
        $youtube = env('YOUTUBE');

        self::assertEquals('Programmer Zaman Now', $youtube);
    }

    public function testDefaultEnv()
    {
        $author = Env::get('AUTHOR', 'Eko');

        self::assertEquals('Eko', $author);
    }


}

Kode : Test Environment Variable

File .env
Selain membaca dari environment variable, Laravel juga memiliki kemampuan untuk membaca nilai dari file .env yang terdapat di project Laravel
Ini lebih mudah dibandingkan mengubah environment variable di sistem operasi
Kita cukup menambah environment variable ke file .env
File .env secara default di ignore di Git project Laravel, oleh karena itu, kita bisa menambahkan konfigurasi di local tanpa takut ter-commit ke Git Repository

Kode : File .env
YOUTUBE='Programmer Zaman Now'

APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:8yKx5XZ8KxlLe1ZyOv6OcVLHKXA1AtRpq8RHi86d2f0=
APP_DEBUG=true
APP_URL=http://localhost

Default Value
Laravel mendukung default value untuk environment variable
Default value adalah nilai yang akan digunakan ketika environment variable yang kita ambil tidak tersedia
Kita bisa menggunakan function env(key, default) atau Env::get(key, default)

Kode : Default Environment Value
    public function testDefaultEnv()
    {
        $author = Env::get('AUTHOR', 'Eko');

        self::assertEquals('Eko', $author);
    }

Application Environment
Saat membuat aplikasi, kadang kita ingin menentukan saat ini sedang berjalan di environment mana, misal di local, di dev, di staging, di qa atau di production
Di Laravel, hal ini biasanya dilakukan dengan menggunakan environment variable APP_ENV
Dan untuk mengecek saat ini sedang berjalan di environment apa, kita bisa menggunakan function App::environment(value) atau App::environment([value1, value2]), dimana akan return true jika benar

Kode : PHP Unit
        <env name="APP_ENV" value="testing"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_DRIVER" value="array"/>

Kode : Application Environment
<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\App;
use Tests\TestCase;

class AppEnvironmentTest extends TestCase
{
    public function testAppEnv() {
        if(App::environment(['testing', 'prod', 'dev'])){
            // kode program kita
            self::assertTrue(true);
        }
    }
}

Configuration
